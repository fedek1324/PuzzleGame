import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.Graphics2D;import java.awt.GridLayout;import java.awt.Image;import java.awt.List;import java.awt.TrayIcon.MessageType;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.image.BufferedImage;import java.awt.image.CropImageFilter;import java.awt.image.FilteredImageSource;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.net.URISyntaxException;import java.net.URL;import java.nio.file.Paths;import java.util.ArrayList;import java.util.Collections;import javax.imageio.ImageIO;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.WindowConstants;public class GameMain extends JFrame implements ActionListener{	/**	 * 	 */	private static final long serialVersionUID = 1L;		BufferedImage source;	JPanel panel;	ArrayList<PuzzleButton> buttons;	ArrayList<PuzzleButton> selectedButtons;	ArrayList<Integer> sequence;	int pictureRows = 3;	int pictureColumns = 4;	int buttonRows = 1;	int buttonColumns = 4;	JLabel statusLabel;	boolean inGame = true;	File pictureFile;		//����������� ����	public GameMain() throws URISyntaxException, IOException, ClassNotFoundException {	super();		        setTitle("Game");        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);        setLocation(400, 10);        sequence = new ArrayList<Integer>();        boolean loadedSequence = false;        try {        	// �������� ���������� �������� � ������� �����			pictureFile = getSave().lastPicture;			sequence = getSave().lastSequence;			loadedSequence = true;		} catch (ClassNotFoundException | IOException e1) {			// �������� �������� ���������	        URL res = getClass().getClassLoader().getResource("greenRiver.jpg");	        // ���� �� ����� ���������			if (res == null) {				//�������� ������				JOptionPane.showMessageDialog(panel, "greenRiver.jpg not found\nChoose picture", "Error", JOptionPane.ERROR_MESSAGE);				//���� �� ����� ������� �������� �������� ���� ������ ��������				while (pictureFile == null) {					pictureFile = chooseImage();				}			}			else // ��������� ���������				pictureFile = Paths.get(res.toURI()).toFile();		}        //��������� �������� � ���������� source        source = loadImage(pictureFile);        //������� ���������        if (!loadedSequence) {        	for (int i = 0; i < pictureColumns*pictureRows; i++) {				sequence.add(i);			}        	Collections.shuffle(sequence);        }		initUI(source, sequence);		setLocationRelativeTo(null);		setVisible(true);		setFocusable(true);	}		SavedGame getSave() throws IOException, ClassNotFoundException {	    FileInputStream fileInputStream = new FileInputStream("savedGave.save");	    ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);	    SavedGame savedGame = (SavedGame) objectInputStream.readObject();	    return savedGame;	}		public void initUI(BufferedImage source, ArrayList<Integer> sequence) throws ClassNotFoundException, IOException {		int width=0, height=0;		buttons = new ArrayList<PuzzleButton>();		selectedButtons = new ArrayList<PuzzleButton>();		width = source.getWidth();		height = source.getHeight();		//��������� ����������� ���������� �� ������ � ������ ����� ��������� ������ ������ 500 ������ ������ 800		double kw = width/800.0, kh = height/500.0;	    // ����. �� ������� ��� ��������� ��������		double k;		if (kw < 1 && kh < 1)			k =  Math.min(kw, kh);		else			k = Math.max(kw, kh);				source = resizeImage(source, (int)(width/k), (int)(height/k), BufferedImage.TYPE_INT_ARGB);		width = source.getWidth();		height = source.getHeight();				for (int i = 0; i < pictureRows; i++) {			for (int j = 0; j < pictureColumns; j++) {				Image image = createImage(new FilteredImageSource(source.getSource(), 						new CropImageFilter(j*width/pictureColumns, i*height/pictureRows, width/pictureColumns, height/pictureRows)));				PuzzleButton button = new PuzzleButton( new ImageIcon(image));				button.number = j + i*pictureColumns;			   // ������� ���������� �������				button.addActionListener(this);				buttons.add(button);			}		}		//���������� buttons � ������������ � sequence		for (int i = 0; i < sequence.size(); i++) {			int numberOfButton = sequence.get(i);			for (int j = 0; j < buttons.size(); j++) {				if(buttons.get(j).number == numberOfButton) {					Collections.swap(buttons, i, j);				}			}		}				panel = new JPanel();		panel.setBorder(BorderFactory.createLineBorder(Color.GRAY));		//������ ����� ��� ������		panel.setLayout(new GridLayout(pictureRows + buttonRows, pictureColumns + buttonColumns));		//������� ������ �� ����		add(panel, BorderLayout.CENTER);		for (int i = 0; i < buttons.size(); i++) {			panel.add(buttons.get(i));		}		JButton loadImageButton = new JButton("LoadImage");	    // ������� ���������� �������		loadImageButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				try {					// ���� �������� �� ������ ��������					changeImage();				} catch (IOException | ClassNotFoundException e1) {					// ������� �� ����������					e1.printStackTrace();				}			}		});		panel.add(loadImageButton);				JButton reloadButton = new JButton("Restart");		reloadButton.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				try {					reload();				} catch (ClassNotFoundException | IOException e1) {					// TODO Auto-generated catch block					e1.printStackTrace();				}			}		});		panel.add(reloadButton);		statusLabel = new JLabel("Make a picture");		statusLabel.setFont(new Font("Arial", Font.BOLD, 15));		panel.add(statusLabel);		setSize(width + 25, (int) (Math.round(height/3.0*4)) + 45);				try {			saveGame(pictureFile);		} catch (ClassNotFoundException | IOException e1) {			//������� �� ����������			e1.printStackTrace();		}	    // ����������� ���� �� ����� ������		setLocationRelativeTo(null);		checkWin();		saveGame(pictureFile);	}		void reload() throws ClassNotFoundException, IOException {		// c������ ������ ������ ���������		panel.setVisible(false);		ArrayList<Integer> newSequence = new ArrayList<Integer>();		for (int i = 0; i < pictureColumns*pictureRows; i++) {			newSequence.add(i);		}    	Collections.shuffle(newSequence);	    // ������ ��������� � ����� ������ �� ������ ��������� �� ��� ������������ �����		initUI(source, newSequence);		// ����� �������� ������		inGame = true;		saveGame(pictureFile);	}		void saveGame(File picture) throws IOException, ClassNotFoundException {		// 		SavedGame save;		// ������ ���������� � ���������� � ������� ���������		ArrayList<Integer> sequence = new ArrayList<Integer>();		for (PuzzleButton puzzleButton : buttons) {			sequence.add(puzzleButton.number);		}		save = new SavedGame(picture, sequence);	    FileOutputStream outputStream = new FileOutputStream("savedGave.save");	    ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);	    objectOutputStream.writeObject(save);	    objectOutputStream.close();	}		File chooseImage() {		// ������� ���� ������ �����		JFileChooser fileopen = new JFileChooser();		// �������� ���� ������ �����		int ret = fileopen.showDialog(null, "������� ����");   		// ���� ������� ����		if (ret == JFileChooser.APPROVE_OPTION) {			// ��������� � ���������� ����		    File file = fileopen.getSelectedFile();		    try {		    	// �������� ��������� ��������				BufferedImage loadedImage = loadImage(file);				// ���� ������ �� ���������				if (loadedImage == null) {					//������ ���� ������					JOptionPane.showMessageDialog(panel, "File read error", "Error", JOptionPane.ERROR_MESSAGE);					// ������ �� ����������					return null;				}				// ���� ��������� �� ���������� ���� ��������				return file;			} catch (IOException e1) {				e1.printStackTrace();				//������� �� ����������			}		}		return null;	}		private void changeImage() throws IOException, ClassNotFoundException {		//�������� ������� ������ ��������		File file = chooseImage();		// ���� �� ������� ��������		if (file == null)			return;		// ��������� ��������		source = loadImage(file);		// ��������� � ���������� ������ ���� ��������		pictureFile = file;	    // ������ ������ � �������� ��������� ���������		panel.setVisible(false);		// ������ ��������� � ������ � ����� ���������		ArrayList<Integer> newSequence = new ArrayList<Integer>();		for (int i = 0; i < pictureColumns*pictureRows; i++) {			newSequence.add(i);		}    	Collections.shuffle(newSequence);		initUI(source, newSequence);		// ������ ����� �������� ������		inGame = true;		saveGame(pictureFile);	}		private BufferedImage resizeImage(BufferedImage originImage, int width, int height, int type) {		BufferedImage resizedImage = new BufferedImage(width, height, type);		Graphics2D g = resizedImage.createGraphics();		g.drawImage(originImage, 0, 0, width, height, null);		g.dispose();		return resizedImage;	}		private BufferedImage loadImage(File file) throws IOException {		BufferedImage bimg = ImageIO.read(file);		return bimg;	}		public static void main(String[] args) throws URISyntaxException, IOException, ClassNotFoundException {		GameMain game = new GameMain();	}		private void checkWin() {		for (int i = 0; i < buttons.size(); i++) {			if (buttons.get(i).number != i)				return;		}		statusLabel.setText("You win!");		statusLabel.setForeground(Color.GREEN);		inGame = false;	}	@Override	public void actionPerformed(ActionEvent a) {		if (!inGame)			return;		// �������� ������ ������� ������� �������� �� �� ������� ������		PuzzleButton pressedButton = (PuzzleButton) a.getSource();		// ������� ������ �����		pressedButton.setBorder(BorderFactory.createLineBorder(Color.GREEN));		// �������� � ������ ������ �� ������� ��� ������� �� ��� ����� 2 �������� ��� ������ ������� ������		selectedButtons.add(pressedButton);				if (selectedButtons.size() == 2) {			PuzzleButton button1 = selectedButtons.get(0);			PuzzleButton button2 = selectedButtons.get(1);			button1.setBorder( BorderFactory.createLineBorder(Color.GRAY));			button2.setBorder( BorderFactory.createLineBorder(Color.GRAY));			int indexOfButton1 = buttons.indexOf(button1);			int indexOfButton2 = buttons.indexOf(button2);			panel.remove(button1);			panel.remove(button2);			if (indexOfButton1 > indexOfButton2) {				panel.add(button1, indexOfButton2);				panel.add(button2, indexOfButton1);			}			else {				panel.add(button2, indexOfButton1);				panel.add(button1, indexOfButton2);			}					Collections.swap(buttons, buttons.indexOf(button1), buttons.indexOf(button2));			//button1.setText(String.valueOf(button1.number) + " " + String.valueOf(buttons.indexOf(button1)));			//button2.setText(String.valueOf(button2.number) + " " + String.valueOf(buttons.indexOf(button2)));			button1.setText(null); button2.setText(null);			selectedButtons.clear();			checkWin();		}		try {			saveGame(pictureFile);		} catch (ClassNotFoundException | IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}}